// <auto-generated />
using System;
using Ecommerce.Core.src.ValueObject;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240517123245_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "shipped", "pending", "awaiting_payment", "processing", "shipping", "completed", "refunded", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("phone_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("street");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_addresses_user_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1240fd2a-c34b-426f-932d-06226054d473"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=10",
                            Name = "Electronic",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("acd768a6-0939-44a5-9964-72999661f1bf"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=1",
                            Name = "Clothing",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("27b05085-73ca-4884-a330-58d006ea0937"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=1",
                            Name = "Furniture",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("d53428db-3770-452c-9e32-2cce8f101b9b"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=7",
                            Name = "Books",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("8cc848c4-c89e-4d43-a253-dc7b9d13e515"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=10",
                            Name = "Toys",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("5e202c87-9bd7-4163-bb66-2609f790d745"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Image = "https://picsum.photos/200/?random=7",
                            Name = "Sports",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<int>("Inventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("inventory");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Price")
                        .HasDatabaseName("ix_products_price");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("title");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("product_inventory_check", "inventory >= 0");

                            t.HasCheckConstraint("product_price_check", "price > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7d2dd69-b1c4-452a-94fe-1db98c5a0c10"),
                            CategoryId = new Guid("1240fd2a-c34b-426f-932d-06226054d473"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Description = "Description for Electronic Product 1",
                            Inventory = 100,
                            Price = 100,
                            Title = "Electronic Product 1",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("17e3a904-7c68-4ef2-bd60-ad01a406497d"),
                            CategoryId = new Guid("acd768a6-0939-44a5-9964-72999661f1bf"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Description = "Description for Clothing Product 1",
                            Inventory = 100,
                            Price = 600,
                            Title = "Clothing Product 1",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("8945be60-141b-4f60-9e97-3b426a2411ca"),
                            CategoryId = new Guid("27b05085-73ca-4884-a330-58d006ea0937"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Description = "Description for Furniture Product 1",
                            Inventory = 100,
                            Price = 400,
                            Title = "Furniture Product 1",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("2ef4e81f-ca55-4fc4-bfd7-5d30cc30c910"),
                            CategoryId = new Guid("d53428db-3770-452c-9e32-2cce8f101b9b"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Description = "Description for Books Product 1",
                            Inventory = 100,
                            Price = 1000,
                            Title = "Books Product 1",
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_images_product_id");

                    b.ToTable("images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba2366f1-c53b-4420-8478-58ebd3507827"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 133, 149, 170, 60, 217, 6, 92, 190, 114, 153, 16, 238, 185, 254, 131, 134, 96, 68, 38, 150, 170, 128, 9, 146, 155, 102, 149, 84, 217, 236, 151, 39, 196, 245, 85, 189, 73, 42, 230, 205, 119, 61, 251, 107, 122, 177, 202, 56, 39, 28, 30, 146, 22, 160, 91, 156, 194, 42, 177, 245, 140, 133, 70, 113, 116, 89, 225, 129, 248, 208, 221, 116, 41, 102, 72, 179, 61, 95, 237, 237, 39, 108, 10, 73, 173, 21, 35, 118, 120, 255, 117, 229, 33, 153, 108, 11, 233, 190, 119, 42 },
                            ProductId = new Guid("c7d2dd69-b1c4-452a-94fe-1db98c5a0c10"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("33c2718b-47f3-4281-927f-285f3ac88f6a"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 97, 176, 92, 205, 212, 238, 196, 242, 25, 150, 124, 122, 111, 223, 167, 148, 196, 144, 94, 63, 26, 5, 30, 128, 173, 28, 75, 52, 198, 184, 218, 199, 153, 0, 169, 156, 169, 7, 173, 178, 149, 233, 125, 68, 149, 194, 47, 8, 94, 237, 158, 220, 24, 41, 111, 244, 13, 174, 246, 54, 85, 202, 184, 80, 244, 115, 228, 5, 196, 14, 224, 27, 115, 214, 54, 106, 124, 52, 164, 179, 233, 81, 85, 19, 44, 21, 224, 130, 237, 230, 73, 115, 78, 89, 119, 249, 83, 4, 222, 192 },
                            ProductId = new Guid("c7d2dd69-b1c4-452a-94fe-1db98c5a0c10"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("6be9f424-175f-45e1-ae70-44dc0912cfd2"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 36, 88, 18, 173, 228, 158, 141, 111, 223, 84, 39, 202, 240, 14, 107, 42, 161, 46, 131, 192, 102, 166, 89, 50, 190, 85, 227, 49, 214, 85, 107, 50, 121, 187, 138, 159, 225, 216, 144, 143, 60, 212, 66, 9, 107, 222, 3, 97, 170, 150, 182, 196, 38, 154, 150, 122, 145, 186, 187, 106, 36, 5, 81, 164, 41, 114, 190, 62, 91, 88, 123, 228, 75, 18, 115, 225, 201, 10, 4, 125, 24, 175, 38, 244, 230, 246, 155, 149, 133, 206, 95, 173, 251, 231, 213, 89, 192, 195, 144, 1 },
                            ProductId = new Guid("c7d2dd69-b1c4-452a-94fe-1db98c5a0c10"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("da147dcb-2155-45ee-8ace-edcf6542dcfa"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 222, 165, 60, 209, 54, 122, 131, 184, 105, 184, 197, 188, 147, 103, 242, 82, 92, 78, 251, 49, 122, 81, 110, 227, 147, 33, 69, 118, 145, 38, 77, 57, 162, 104, 2, 181, 144, 92, 207, 92, 140, 252, 215, 218, 217, 141, 128, 149, 209, 168, 198, 241, 39, 209, 30, 174, 76, 140, 134, 247, 13, 226, 22, 20, 158, 63, 121, 126, 159, 112, 22, 172, 52, 110, 131, 164, 188, 159, 216, 18, 152, 144, 151, 186, 245, 15, 33, 245, 161, 29, 236, 179, 206, 141, 187, 13, 121, 55, 83, 35 },
                            ProductId = new Guid("17e3a904-7c68-4ef2-bd60-ad01a406497d"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("84896d58-97a9-449d-8c6a-caf2f1ffb39d"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 42, 220, 19, 198, 208, 144, 28, 235, 42, 32, 132, 1, 62, 103, 252, 238, 92, 112, 202, 219, 210, 172, 72, 18, 96, 165, 194, 176, 252, 211, 214, 159, 34, 68, 46, 107, 32, 189, 56, 87, 180, 245, 142, 89, 124, 205, 91, 41, 119, 228, 44, 99, 186, 153, 128, 123, 198, 14, 238, 172, 253, 80, 2, 144, 58, 70, 158, 89, 152, 99, 122, 92, 52, 13, 74, 151, 166, 5, 46, 193, 243, 48, 49, 45, 151, 73, 32, 234, 87, 57, 168, 228, 118, 192, 158, 77, 199, 204, 241, 117 },
                            ProductId = new Guid("17e3a904-7c68-4ef2-bd60-ad01a406497d"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("908dbc76-033a-40f5-afa2-f89dbbf79d10"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 36, 158, 114, 240, 220, 248, 124, 182, 224, 139, 251, 246, 172, 72, 77, 156, 166, 102, 127, 163, 5, 233, 206, 74, 252, 116, 174, 188, 215, 55, 187, 184, 134, 14, 81, 207, 30, 97, 156, 176, 232, 18, 56, 157, 152, 75, 46, 148, 2, 166, 167, 85, 204, 0, 91, 26, 44, 196, 54, 203, 255, 203, 30, 145, 127, 55, 22, 113, 19, 190, 141, 53, 184, 80, 172, 113, 11, 146, 71, 157, 176, 160, 222, 213, 79, 186, 169, 97, 95, 39, 57, 80, 156, 75, 125, 31, 243, 254, 204, 77 },
                            ProductId = new Guid("17e3a904-7c68-4ef2-bd60-ad01a406497d"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("40c28233-4574-4910-a7e9-6235feb3f961"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 102, 30, 226, 217, 140, 168, 43, 64, 143, 43, 14, 155, 123, 225, 162, 203, 224, 45, 137, 88, 197, 29, 162, 141, 26, 225, 48, 231, 194, 56, 180, 134, 228, 109, 210, 250, 226, 82, 17, 187, 100, 49, 234, 172, 32, 70, 120, 128, 210, 21, 116, 42, 104, 54, 194, 113, 52, 169, 213, 179, 181, 24, 73, 232, 27, 95, 194, 178, 186, 120, 49, 50, 231, 98, 68, 132, 159, 202, 3, 152, 23, 197, 252, 105, 63, 183, 153, 255, 9, 96, 4, 91, 181, 96, 251, 169, 169, 223, 176, 4 },
                            ProductId = new Guid("8945be60-141b-4f60-9e97-3b426a2411ca"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("e46a8d27-15f6-426d-914b-afc3e237255d"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 232, 130, 214, 100, 143, 255, 184, 200, 100, 59, 141, 158, 52, 162, 3, 56, 112, 92, 122, 12, 12, 21, 3, 69, 40, 210, 22, 246, 148, 140, 82, 150, 151, 183, 73, 117, 203, 9, 174, 134, 224, 87, 44, 127, 158, 109, 193, 23, 63, 183, 70, 74, 188, 153, 139, 136, 176, 215, 110, 19, 84, 5, 184, 10, 21, 197, 201, 107, 121, 59, 49, 45, 229, 127, 188, 252, 97, 237, 15, 6, 70, 185, 59, 32, 224, 233, 230, 194, 58, 137, 201, 68, 213, 125, 165, 239, 168, 132, 208, 129 },
                            ProductId = new Guid("8945be60-141b-4f60-9e97-3b426a2411ca"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("54b56cba-b56b-47cc-a897-4be91e4951bd"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 105, 248, 195, 181, 86, 195, 228, 80, 232, 236, 126, 98, 2, 143, 207, 252, 108, 188, 192, 153, 105, 207, 243, 63, 107, 173, 127, 44, 234, 79, 46, 43, 31, 204, 10, 161, 158, 253, 119, 130, 251, 118, 33, 38, 194, 201, 53, 32, 14, 128, 14, 29, 76, 118, 220, 74, 92, 44, 43, 64, 95, 171, 251, 99, 154, 114, 168, 199, 84, 53, 34, 165, 153, 46, 152, 230, 167, 52, 188, 32, 23, 16, 19, 164, 174, 18, 149, 42, 253, 209, 87, 224, 216, 122, 185, 14, 102, 199, 35, 124 },
                            ProductId = new Guid("8945be60-141b-4f60-9e97-3b426a2411ca"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("c95bd4c9-5fa0-4b9a-b5ef-f4744b02bb33"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 140, 141, 100, 241, 31, 222, 52, 49, 104, 123, 95, 51, 117, 157, 158, 198, 165, 202, 145, 235, 112, 203, 196, 77, 46, 215, 153, 237, 90, 77, 240, 58, 236, 38, 150, 186, 194, 92, 9, 27, 16, 67, 204, 160, 41, 148, 243, 104, 21, 100, 74, 11, 92, 215, 39, 22, 255, 101, 246, 64, 147, 150, 58, 78, 96, 119, 42, 119, 139, 237, 6, 86, 85, 220, 63, 106, 117, 97, 60, 222, 25, 69, 104, 46, 155, 248, 179, 185, 80, 16, 64, 13, 35, 78, 30, 121, 145, 133, 141, 70 },
                            ProductId = new Guid("2ef4e81f-ca55-4fc4-bfd7-5d30cc30c910"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("7582bda1-32b7-4d83-984a-9ff7c709a54e"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 33, 138, 103, 149, 147, 46, 42, 21, 201, 89, 1, 39, 50, 87, 60, 129, 250, 65, 200, 163, 27, 132, 251, 215, 29, 209, 12, 73, 182, 212, 169, 137, 3, 15, 169, 227, 110, 133, 149, 90, 199, 76, 128, 245, 219, 141, 23, 9, 188, 208, 83, 41, 204, 210, 107, 130, 159, 113, 209, 149, 155, 80, 242, 122, 55, 156, 165, 180, 225, 28, 177, 80, 39, 32, 198, 211, 25, 233, 31, 26, 38, 237, 42, 164, 137, 40, 4, 38, 214, 162, 46, 115, 49, 150, 16, 42, 150, 108, 108, 10 },
                            ProductId = new Guid("2ef4e81f-ca55-4fc4-bfd7-5d30cc30c910"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("075af4de-47ed-4c24-9e25-d671dff8e248"),
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Data = new byte[] { 188, 83, 214, 136, 10, 77, 202, 196, 41, 112, 78, 127, 65, 99, 90, 137, 244, 8, 77, 174, 151, 68, 7, 187, 96, 127, 65, 53, 208, 160, 198, 91, 183, 4, 159, 255, 29, 253, 0, 205, 89, 25, 190, 171, 87, 151, 53, 138, 175, 47, 78, 201, 106, 150, 221, 124, 43, 187, 19, 195, 139, 1, 115, 226, 166, 206, 117, 0, 21, 190, 136, 203, 121, 38, 94, 241, 127, 196, 30, 27, 11, 239, 97, 170, 255, 169, 142, 236, 195, 135, 179, 24, 14, 83, 165, 177, 153, 164, 69, 56 },
                            ProductId = new Guid("2ef4e81f-ca55-4fc4-bfd7-5d30cc30c910"),
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<UserRole>("Role")
                        .HasColumnType("user_role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb6ded65-c273-4901-8acf-aec8f75f24d7"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Email = "john@example.com",
                            Name = "Admin1",
                            Password = "A9Xi+dVpHNwak10oMx6U3U3QyBqOy0818qBZhC6m+Eg=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 182, 101, 160, 78, 45, 109, 123, 119, 155, 235, 99, 16, 66, 168, 118, 205 },
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("aafb7154-e2fb-4236-bae0-01505a6e54ee"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Email = "binh@admin.com",
                            Name = "Binh",
                            Password = "bjJdEuxyZuDH7Xxp95YUTaER0azAJvihCLOjMKoZZn8=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 23, 246, 39, 152, 135, 219, 73, 167, 227, 184, 21, 89, 18, 132, 48, 3 },
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("766249a0-5173-4685-95e3-805d5fc37319"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Email = "adnan@admin.com",
                            Name = "Adnan",
                            Password = "TKgRYL8rcBieG8e0gBOK335UQNb3ncknyEEXG5scnzM=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 62, 129, 197, 205, 178, 3, 146, 240, 248, 68, 19, 40, 40, 44, 33, 19 },
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("991a2489-7e2a-4449-95c4-a7fbbbf33d0e"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Email = "yuanke@admin.com",
                            Name = "Yuanke",
                            Password = "bweRA4W5G+FKUOtiPeM8MHUDDS5ENURRJansNxy5TmI=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 28, 205, 52, 197, 89, 26, 201, 167, 57, 50, 135, 215, 238, 97, 164, 22 },
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        },
                        new
                        {
                            Id = new Guid("494f0f98-14b8-49eb-a944-54ddce3341b6"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            CreatedDate = new DateOnly(2024, 5, 17),
                            Email = "customer1@customer.com",
                            Name = "Customer1",
                            Password = "Q8zgm1xgvZEAzY78sQQHeRdHUT1sG7I1AeBvVPwHUG4=",
                            Role = UserRole.Customer,
                            Salt = new byte[] { 191, 16, 205, 220, 216, 65, 162, 231, 86, 181, 136, 238, 37, 94, 55, 207 },
                            UpdatedDate = new DateOnly(2024, 5, 17)
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.OrderProduct", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_products_product_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.User", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
