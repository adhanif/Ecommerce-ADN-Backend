// <auto-generated />
using System;
using Ecommerce.Core.src.ValueObject;
using Ecommerce.WebAPI.src.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240516134214_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "shipped", "pending", "awaiting_payment", "processing", "shipping", "completed", "refunded", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "admin", "customer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("phone_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("street");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_addresses_user_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4f09a92-01c0-4d79-ba14-f7ed3c23de3b"),
                            Image = "https://picsum.photos/200/?random=8",
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = new Guid("b988b38b-cff9-4af7-94fe-8bb6d4a7b5a0"),
                            Image = "https://picsum.photos/200/?random=8",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("94071a05-3856-48ab-a891-452cf286a1cc"),
                            Image = "https://picsum.photos/200/?random=9",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("b23098a9-6fdc-421a-88fb-6b2f68c47e72"),
                            Image = "https://picsum.photos/200/?random=5",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("c3243973-3d11-43b5-bd6f-547528a5eca0"),
                            Image = "https://picsum.photos/200/?random=8",
                            Name = "Toys"
                        },
                        new
                        {
                            Id = new Guid("9aa08bc1-16ad-4ad5-bfcb-8dbc55c1030a"),
                            Image = "https://picsum.photos/200/?random=2",
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<OrderStatus>("Status")
                        .HasColumnType("order_status")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("description");

                    b.Property<int>("Inventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("inventory");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Price")
                        .HasDatabaseName("ix_products_price");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("title");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("product_price_check", "price > 0");
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_images_product_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<UserRole>("Role")
                        .HasColumnType("user_role")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8832b1c9-6113-452f-9509-7979d8819cac"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            Email = "john@example.com",
                            Name = "Admin1",
                            Password = "BUaaFfLeLTP938mGvdOs7rIk2Ah4JsfZilIK26+3AVA=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 193, 247, 6, 35, 124, 161, 169, 74, 72, 124, 61, 145, 119, 90, 218, 3 }
                        },
                        new
                        {
                            Id = new Guid("52cb5567-aa2a-461e-86df-c508153b487a"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            Email = "binh@admin.com",
                            Name = "Binh",
                            Password = "WsZIS+P7bRe11ezaG7Z9kxpis+NbCWDuQRQYZ15Gv8o=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 240, 255, 216, 115, 58, 152, 112, 253, 148, 100, 21, 162, 211, 234, 247, 241 }
                        },
                        new
                        {
                            Id = new Guid("df53680f-dc7f-474e-8433-973b61dbb2c1"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            Email = "adnan@admin.com",
                            Name = "Adnan",
                            Password = "cMaxMBoXaJjU1PGQlq1lB5uKr8GqftXYEXqyJ1Lu1WE=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 114, 5, 121, 163, 120, 209, 253, 49, 74, 167, 148, 184, 225, 123, 36, 160 }
                        },
                        new
                        {
                            Id = new Guid("89f970e3-95d5-44e3-be42-47d68893aa31"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            Email = "yuanke@admin.com",
                            Name = "Yuanke",
                            Password = "EOTyIGnALU/Q24pAF5qVG0iiBNM2bNETmuU3zSJ9Pd4=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 63, 119, 208, 73, 161, 250, 165, 111, 82, 209, 21, 211, 50, 178, 168, 205 }
                        },
                        new
                        {
                            Id = new Guid("ac6e73b0-be66-4945-bd7e-9d1c6e9d7483"),
                            Avatar = "https://picsum.photos/200/?random=System.Func`1[System.Int32]",
                            Email = "customer1@customer.com",
                            Name = "Customer1",
                            Password = "RwNWFBJ4YlapYW0/V10Dm1mWNTnBycWAroAoLehhwoE=",
                            Role = UserRole.Admin,
                            Salt = new byte[] { 172, 247, 0, 252, 227, 170, 77, 90, 239, 199, 128, 181, 212, 6, 86, 19 }
                        });
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Address", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.OrderProduct", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Order", null)
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("Ecommerce.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_products_product_id");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Review", b =>
                {
                    b.HasOne("Ecommerce.Core.src.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_products_product_id");

                    b.HasOne("Ecommerce.Core.src.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.Product", b =>
                {
                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Ecommerce.Core.src.Entity.User", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
